{"ast":null,"code":"import axios from \"axios\";\nimport SessionHelper from \"./SessionHelper\";\n\n// const url = \"https://ambrosia-backend.onrender.com/\"; // base url is not determined yet\nconst url = \"https://d22a-176-88-142-176.ngrok-free.app\"; // base url is not determined yet\n\n/**\r\n * Manages the requests made to the REST api.\r\n * @param {string} action get/post/patch etc.\r\n * @param {string} urlExtension api part of the url\r\n * @param {string} body json object given as a string for the body of the request\r\n * @param {string} params json object given as a string for the params of the request\r\n * @param {string} headers json object given as a string for the extra headers of the request\r\n * @returns {obj} the json object\r\n */\nconst Request = async (action, urlExtension, body, params, headers) => {\n  // check if user is logged in and session time is expired\n  if (SessionHelper.getUser()) {\n    if (isSessionTimeExpired()) {\n      window.location.href = \"/login\";\n      SessionHelper.deleteUser(); // logout\n      return;\n    } else {\n      SessionHelper.setLoginTime(); // set last request time\n    }\n  }\n\n  let header = SessionHelper.getUser() ? {\n    Authorization: \"Bearer \" + SessionHelper.getUser().accessToken,\n    \"Accept-Language\": \"tr-TR\"\n  } : null;\n  if (headers) {\n    header = {\n      ...header,\n      ...headers\n    };\n  }\n  let fetch;\n  let new_url = url + urlExtension;\n  await axios({\n    method: action,\n    url: new_url,\n    data: body,\n    params: params,\n    headers: header\n  }).then(response => {\n    fetch = response;\n  }).catch(error => {\n    var _fetch;\n    fetch = error.response;\n    if (((_fetch = fetch) === null || _fetch === void 0 ? void 0 : _fetch.status) === 401) {\n      window.location = \"/login\";\n      SessionHelper.deleteUser();\n    }\n  });\n  return fetch;\n};\n_c = Request;\nexport const RequestAll = async requests => {\n  let axiosReqs = [];\n  for (let i = 0; i < requests.length; i++) {\n    const req = requests[i];\n    const {\n      action,\n      urlExtension,\n      body,\n      params,\n      headers\n    } = req;\n    let header = SessionHelper.getUser() ? {\n      Authorization: \"Bearer \" + SessionHelper.getUser().accessToken,\n      \"Accept-Language\": \"tr-TR\"\n    } : null;\n    if (headers) {\n      header = {\n        ...header,\n        ...headers\n      };\n    }\n    const new_url = url + urlExtension;\n    axiosReqs.push(axios({\n      method: action,\n      url: new_url,\n      data: body,\n      params: params,\n      headers: header\n    }));\n  }\n  let fetch;\n  await axios.all(axiosReqs).then(axios.spread(function () {\n    for (var _len = arguments.length, responses = new Array(_len), _key = 0; _key < _len; _key++) {\n      responses[_key] = arguments[_key];\n    }\n    fetch = responses;\n  })).catch(error => {\n    fetch = error.response;\n    if (fetch.status === 401) {\n      window.location = \"/login\";\n      SessionHelper.deleteUser();\n    }\n  });\n  return fetch;\n};\n_c2 = RequestAll;\nfunction isSessionTimeExpired() {\n  let requestTime = new Date();\n  // difference between current request time and last request time\n  // https://stackoverflow.com/a/7709819\n  let sessionTime = new Date(SessionHelper.getLoginTime());\n  var diffMs = requestTime - sessionTime; // milliseconds\n  var diffHrs = Math.floor(diffMs % 86400000 / 3600000); // hours\n\n  if (diffHrs >= 0.01) {\n    return true; // expired\n  } else {\n    return false; // not expired\n  }\n}\n\nexport default Request;\nvar _c, _c2;\n$RefreshReg$(_c, \"Request\");\n$RefreshReg$(_c2, \"RequestAll\");","map":{"version":3,"names":["axios","SessionHelper","url","Request","action","urlExtension","body","params","headers","getUser","isSessionTimeExpired","window","location","href","deleteUser","setLoginTime","header","Authorization","accessToken","fetch","new_url","method","data","then","response","catch","error","_fetch","status","_c","RequestAll","requests","axiosReqs","i","length","req","push","all","spread","_len","arguments","responses","Array","_key","_c2","requestTime","Date","sessionTime","getLoginTime","diffMs","diffHrs","Math","floor","$RefreshReg$"],"sources":["C:/Users/sude/Desktop/HAIR_DONATION/ambrosia-frontend/src/helpers/RequestHelper.js"],"sourcesContent":["import axios from \"axios\";\r\nimport SessionHelper from \"./SessionHelper\";\r\n\r\n// const url = \"https://ambrosia-backend.onrender.com/\"; // base url is not determined yet\r\nconst url = \"https://d22a-176-88-142-176.ngrok-free.app\"; // base url is not determined yet\r\n\r\n/**\r\n * Manages the requests made to the REST api.\r\n * @param {string} action get/post/patch etc.\r\n * @param {string} urlExtension api part of the url\r\n * @param {string} body json object given as a string for the body of the request\r\n * @param {string} params json object given as a string for the params of the request\r\n * @param {string} headers json object given as a string for the extra headers of the request\r\n * @returns {obj} the json object\r\n */\r\nconst Request = async (action, urlExtension, body, params, headers) => {\r\n  // check if user is logged in and session time is expired\r\n  if (SessionHelper.getUser()) {\r\n    if (isSessionTimeExpired()) {\r\n      window.location.href = \"/login\";\r\n      SessionHelper.deleteUser(); // logout\r\n      return;\r\n    } else {\r\n      SessionHelper.setLoginTime(); // set last request time\r\n    }\r\n  }\r\n\r\n  let header = SessionHelper.getUser()\r\n    ? {\r\n        Authorization: \"Bearer \" + SessionHelper.getUser().accessToken,\r\n        \"Accept-Language\": \"tr-TR\",\r\n      }\r\n    : null;\r\n  if (headers) {\r\n    header = { ...header, ...headers };\r\n  }\r\n  let fetch;\r\n  let new_url = url + urlExtension;\r\n\r\n  await axios({\r\n    method: action,\r\n    url: new_url,\r\n    data: body,\r\n    params: params,\r\n    headers: header,\r\n  })\r\n    .then((response) => {\r\n      fetch = response;\r\n    })\r\n    .catch((error) => {\r\n      fetch = error.response;\r\n      if (fetch?.status === 401) {\r\n        window.location = \"/login\";\r\n        SessionHelper.deleteUser();\r\n      }\r\n    });\r\n  return fetch;\r\n};\r\n\r\nexport const RequestAll = async (requests) => {\r\n  let axiosReqs = [];\r\n  for (let i = 0; i < requests.length; i++) {\r\n    const req = requests[i];\r\n    const { action, urlExtension, body, params, headers } = req;\r\n    let header = SessionHelper.getUser()\r\n      ? {\r\n          Authorization: \"Bearer \" + SessionHelper.getUser().accessToken,\r\n          \"Accept-Language\": \"tr-TR\",\r\n        }\r\n      : null;\r\n    if (headers) {\r\n      header = { ...header, ...headers };\r\n    }\r\n    const new_url = url + urlExtension;\r\n    axiosReqs.push(\r\n      axios({\r\n        method: action,\r\n        url: new_url,\r\n        data: body,\r\n        params: params,\r\n        headers: header,\r\n      })\r\n    );\r\n  }\r\n  let fetch;\r\n  await axios\r\n    .all(axiosReqs)\r\n    .then(\r\n      axios.spread((...responses) => {\r\n        fetch = responses;\r\n      })\r\n    )\r\n    .catch((error) => {\r\n      fetch = error.response;\r\n      if (fetch.status === 401) {\r\n        window.location = \"/login\";\r\n        SessionHelper.deleteUser();\r\n      }\r\n    });\r\n  return fetch;\r\n};\r\n\r\nfunction isSessionTimeExpired() {\r\n  let requestTime = new Date();\r\n  // difference between current request time and last request time\r\n  // https://stackoverflow.com/a/7709819\r\n  let sessionTime = new Date(SessionHelper.getLoginTime());\r\n  var diffMs = requestTime - sessionTime; // milliseconds\r\n  var diffHrs = Math.floor((diffMs % 86400000) / 3600000); // hours\r\n\r\n  if (diffHrs >= 0.01) {\r\n    return true; // expired\r\n  } else {\r\n    return false; // not expired\r\n  }\r\n}\r\n\r\nexport default Request;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}